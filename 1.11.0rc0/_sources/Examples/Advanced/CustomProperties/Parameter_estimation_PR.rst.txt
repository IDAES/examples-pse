Using parameter estimation with generic property package
========================================================

1. Introduction
---------------

This Jupyter Notebook estimates binary interaction parameters for a
CO\ :math:`_2`-Ionic liquid property package. A property package has
been created for CO\ :math:`_2`-[bmim][PF6]. We will utilize Pyomoâ€™s
``parmest`` tool in conjuction with IDAES models for parameter
estimation. We demonstrate these tools by estimating the parameters
associated with the Peng-Robinson property model for a benzene-toluene
mixture. The Peng-Robinson EOS the binary interaction parameter
(kappa_ij). When estimating parameters associated with the property
package, IDAES provides the flexibility of doing the parameter
estimation by just using the state block or by using a unit model with a
specified property package. This module will demonstrate parameter
estimation by using the flash unit model with the generic property
package.

1.1 Tutorial objectives
~~~~~~~~~~~~~~~~~~~~~~~

-  Utilize the Generic Property Package, which provides a flexible
   platform for users to build property packages by calling upon
   libraries of modular sub-models to build up complex property
   calculations with the least effort possible.
-  Set up a method to return an initialized model
-  Set up the parameter estimation problem using ``parmest``

2. Problem Statement
--------------------

2.1 Importing Pyomo and IDAES model and flowsheet components.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

In the next cell, we will be importing the necessary components from
Pyomo and IDAES.

.. code:: ipython3

    # Import objects from pyomo package
    from pyomo.environ import (ConcreteModel,
                               SolverFactory,
                               units as pyunits)
    
    # Import the main FlowsheetBlock from IDAES. The flowsheet block will contain the unit model
    from idaes.core import FlowsheetBlock
    
    # Import idaes logger to set output levels
    import idaes.logger as idaeslog
    
    # Import Flash unit model from idaes.generic_models.unit_models
    from idaes.generic_models.unit_models import Flash

2.2 Import parmest
~~~~~~~~~~~~~~~~~~

.. code:: ipython3

    import pyomo.contrib.parmest.parmest as parmest

2.3 Import the generic parameter block
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: ipython3

    from idaes.generic_models.properties.core.examples.CO2_bmimPF6_PR import configuration
    
    from idaes.generic_models.properties.core.generic.generic_property import GenericParameterBlock

2.4 Import data
~~~~~~~~~~~~~~~

In the next cell, we will be importing ``pandas`` and the ``.csv`` file
with preassure and composition data. For this example, we load data from
the csv file CO2_IL_298.csv. The dataset consists of ninteen data points
which provide the mole fraction of [bmim][PF6] and carbon dioxide and
the pressure at three different temperatures.

.. code:: ipython3

    import pandas as pd
    
    # Load data from csv
    data = pd.read_csv('CO2_IL_298.csv')

3.0 Setting up an initialized model
-----------------------------------

We need to provide a method that returns an initialized model to the
``parmest`` tool in Pyomo.

How we build the model will depend on the data we provided in the data
dataframe from pir .csv file.

In this case we have data on the liquid mixture, the temperature and the
pressure. We will fix the temperature, mole franction in the liquid
phase, and the mole fraction of the inlet.

.. code:: ipython3

    def PR_model(data):
        
        m = ConcreteModel()
    
        m.fs = FlowsheetBlock(default={"dynamic": False})
    
        m.fs.properties = GenericParameterBlock(default=configuration)
    
        m.fs.state_block = m.fs.properties.build_state_block([1],
            default={"defined_state": True})
    
        m.fs.state_block[1].flow_mol.fix(1)
        x = float(data["x_carbon_dioxide"])+0.5
        m.fs.state_block[1].temperature.fix(float(data["temperature"]))
        m.fs.state_block[1].pressure.fix(float(data["pressure"]))
        m.fs.state_block[1].mole_frac_comp["bmimPF6"].fix(1-x)
        m.fs.state_block[1].mole_frac_comp["carbon_dioxide"].fix(x)
        
        # parameter - kappa_ij (set at 0.3, 0 if i=j)
        m.fs.properties.PR_kappa['bmimPF6', 'bmimPF6'].fix(0)
        m.fs.properties.PR_kappa['bmimPF6', 'carbon_dioxide'].fix(-0.047)
        m.fs.properties.PR_kappa['carbon_dioxide', 'carbon_dioxide'].fix(0)
        m.fs.properties.PR_kappa['carbon_dioxide', 'bmimPF6'].fix(0.002)
    
        # Initialize the flash unit
        m.fs.state_block.initialize(outlvl=idaeslog.INFO)
    
        # Fix the state variables on the state block
        m.fs.state_block[1].pressure.unfix()
        m.fs.state_block[1].temperature.fix(float(data["temperature"]))
        m.fs.state_block[1].mole_frac_phase_comp['Liq', 'bmimPF6'].fix(float(data["x_bmimPF6"]))
        m.fs.state_block[1].mole_frac_phase_comp['Liq', 'carbon_dioxide'].fix(float(data["x_carbon_dioxide"]))
        m.fs.state_block[1].mole_frac_comp['bmimPF6'].fix(float(data["x_bmimPF6"]))
        m.fs.state_block[1].mole_frac_comp['carbon_dioxide'].unfix()
        # Set bounds on variables to be estimated
        m.fs.properties.PR_kappa['bmimPF6', 'carbon_dioxide'].setlb(-5)
        m.fs.properties.PR_kappa['bmimPF6', 'carbon_dioxide'].setub(5)
    
        m.fs.properties.PR_kappa['carbon_dioxide', 'bmimPF6'].setlb(-5)
        m.fs.properties.PR_kappa['carbon_dioxide', 'bmimPF6'].setub(5)
    
        # Return initialized flash model
        return m

3.1 Solving square problem
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: ipython3

    from idaes.core.util.model_statistics import degrees_of_freedom
    import pytest
    
    test_data = {"temperature": 298, "pressure": 812323, "x_bmimPF6":0.86, "x_carbon_dioxide":0.14}
    
    m = PR_model(test_data)
    
    # Check that degrees of freedom is 0
    assert degrees_of_freedom(m) == 0


.. parsed-literal::

    WARNING: DEPRECATED: Using __getitem__ to return a set value from its
        (ordered) position is deprecated.  Please use at()  (deprecated in 6.1,
        will be removed in 7.0) (called from
        /home/lbianchi/opt/conda/envs/examples-pse-1.11.0rc0/lib/python3.8/site-pa
        ckages/idaes/generic_models/properties/core/state_definitions/FTPx.py:178)
    WARNING: DEPRECATED: Using __getitem__ to return a set value from its
        (ordered) position is deprecated.  Please use at()  (deprecated in 6.1,
        will be removed in 7.0) (called from
        /home/lbianchi/opt/conda/envs/examples-pse-1.11.0rc0/lib/python3.8/site-pa
        ckages/idaes/generic_models/properties/core/state_definitions/FTPx.py:176)
    2021-08-25 20:03:44 [INFO] idaes.init.fs.state_block: Starting initialization
    2021-08-25 20:03:44 [INFO] idaes.init.fs.state_block: Dew and bubble point initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:44 [INFO] idaes.init.fs.state_block: Equilibrium temperature initialization completed.
    2021-08-25 20:03:44 [INFO] idaes.init.fs.state_block: State variable initialization completed.
    2021-08-25 20:03:44 [INFO] idaes.init.fs.state_block: Phase equilibrium initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:44 [INFO] idaes.init.fs.state_block: Property initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:44 [INFO] idaes.init.fs.state_block: Property package initialization: optimal - Optimal Solution Found.


4.0 Parameter estimation using parmest
--------------------------------------

4.1 List of variable names to be estimated
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Create a list of vars to estimate

.. code:: ipython3

    variable_name = ["fs.properties.PR_kappa['bmimPF6', 'carbon_dioxide']",
                     "fs.properties.PR_kappa['carbon_dioxide', 'bmimPF6']"]

4.2 Create method to return an expression that computes the sum of squared error
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We need to provide a method to return an expression to compute the sum
of squared errors that will be used as the objective in solving the
parameter estimation problem. For this problem, the error will be
computed for the pressure.

.. code:: ipython3

    def SSE(m, data):   
        expr = ((float(data["pressure"]) - m.fs.state_block[1].pressure)**2)
        return expr*1e-7

4.3 Run the parameter estimation
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

We are now ready to set up the parameter estimation problem. We will
create a parameter estimation object called pest. As shown below, we
pass the method that returns an initialized model, data, variable_name,
and the SSE expression to the Estimator method. tee=True will print the
solver output after solving the parameter estimation problem.

.. code:: ipython3

    pest = parmest.Estimator(PR_model, data, variable_name, SSE, tee=True)
    
    obj_value, parameters = pest.theta_est()


.. parsed-literal::

    2021-08-25 20:03:44 [INFO] idaes.init.fs.state_block: Starting initialization
    2021-08-25 20:03:44 [INFO] idaes.init.fs.state_block: Dew and bubble point initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:44 [INFO] idaes.init.fs.state_block: Equilibrium temperature initialization completed.
    2021-08-25 20:03:44 [INFO] idaes.init.fs.state_block: State variable initialization completed.
    2021-08-25 20:03:44 [INFO] idaes.init.fs.state_block: Phase equilibrium initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:45 [INFO] idaes.init.fs.state_block: Property initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:45 [INFO] idaes.init.fs.state_block: Property package initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:45 [INFO] idaes.init.fs.state_block: Starting initialization
    2021-08-25 20:03:45 [INFO] idaes.init.fs.state_block: Dew and bubble point initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:45 [INFO] idaes.init.fs.state_block: Equilibrium temperature initialization completed.
    2021-08-25 20:03:45 [INFO] idaes.init.fs.state_block: State variable initialization completed.
    2021-08-25 20:03:45 [INFO] idaes.init.fs.state_block: Phase equilibrium initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:45 [INFO] idaes.init.fs.state_block: Property initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:45 [INFO] idaes.init.fs.state_block: Property package initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:45 [INFO] idaes.init.fs.state_block: Starting initialization
    2021-08-25 20:03:45 [INFO] idaes.init.fs.state_block: Dew and bubble point initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:45 [INFO] idaes.init.fs.state_block: Equilibrium temperature initialization completed.
    2021-08-25 20:03:45 [INFO] idaes.init.fs.state_block: State variable initialization completed.
    2021-08-25 20:03:45 [INFO] idaes.init.fs.state_block: Phase equilibrium initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:45 [INFO] idaes.init.fs.state_block: Property initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:45 [INFO] idaes.init.fs.state_block: Property package initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:45 [INFO] idaes.init.fs.state_block: Starting initialization
    2021-08-25 20:03:45 [INFO] idaes.init.fs.state_block: Dew and bubble point initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:45 [INFO] idaes.init.fs.state_block: Equilibrium temperature initialization completed.
    2021-08-25 20:03:45 [INFO] idaes.init.fs.state_block: State variable initialization completed.
    2021-08-25 20:03:45 [INFO] idaes.init.fs.state_block: Phase equilibrium initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:45 [INFO] idaes.init.fs.state_block: Property initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:45 [INFO] idaes.init.fs.state_block: Property package initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:45 [INFO] idaes.init.fs.state_block: Starting initialization
    2021-08-25 20:03:45 [INFO] idaes.init.fs.state_block: Dew and bubble point initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:45 [INFO] idaes.init.fs.state_block: Equilibrium temperature initialization completed.
    2021-08-25 20:03:45 [INFO] idaes.init.fs.state_block: State variable initialization completed.
    2021-08-25 20:03:45 [INFO] idaes.init.fs.state_block: Phase equilibrium initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:45 [INFO] idaes.init.fs.state_block: Property initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:45 [INFO] idaes.init.fs.state_block: Property package initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:45 [INFO] idaes.init.fs.state_block: Starting initialization
    2021-08-25 20:03:45 [INFO] idaes.init.fs.state_block: Dew and bubble point initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:45 [INFO] idaes.init.fs.state_block: Equilibrium temperature initialization completed.
    2021-08-25 20:03:45 [INFO] idaes.init.fs.state_block: State variable initialization completed.
    2021-08-25 20:03:45 [INFO] idaes.init.fs.state_block: Phase equilibrium initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:46 [INFO] idaes.init.fs.state_block: Property initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:46 [INFO] idaes.init.fs.state_block: Property package initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:46 [INFO] idaes.init.fs.state_block: Starting initialization
    2021-08-25 20:03:46 [INFO] idaes.init.fs.state_block: Dew and bubble point initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:46 [INFO] idaes.init.fs.state_block: Equilibrium temperature initialization completed.
    2021-08-25 20:03:46 [INFO] idaes.init.fs.state_block: State variable initialization completed.
    2021-08-25 20:03:46 [INFO] idaes.init.fs.state_block: Phase equilibrium initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:46 [INFO] idaes.init.fs.state_block: Property initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:46 [INFO] idaes.init.fs.state_block: Property package initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:46 [INFO] idaes.init.fs.state_block: Starting initialization
    2021-08-25 20:03:46 [INFO] idaes.init.fs.state_block: Dew and bubble point initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:46 [INFO] idaes.init.fs.state_block: Equilibrium temperature initialization completed.
    2021-08-25 20:03:46 [INFO] idaes.init.fs.state_block: State variable initialization completed.
    2021-08-25 20:03:46 [INFO] idaes.init.fs.state_block: Phase equilibrium initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:46 [INFO] idaes.init.fs.state_block: Property initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:46 [INFO] idaes.init.fs.state_block: Property package initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:46 [INFO] idaes.init.fs.state_block: Starting initialization
    2021-08-25 20:03:46 [INFO] idaes.init.fs.state_block: Dew and bubble point initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:46 [INFO] idaes.init.fs.state_block: Equilibrium temperature initialization completed.
    2021-08-25 20:03:46 [INFO] idaes.init.fs.state_block: State variable initialization completed.
    2021-08-25 20:03:46 [INFO] idaes.init.fs.state_block: Phase equilibrium initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:46 [INFO] idaes.init.fs.state_block: Property initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:46 [INFO] idaes.init.fs.state_block: Property package initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:46 [INFO] idaes.init.fs.state_block: Starting initialization
    2021-08-25 20:03:46 [INFO] idaes.init.fs.state_block: Dew and bubble point initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:46 [INFO] idaes.init.fs.state_block: Equilibrium temperature initialization completed.
    2021-08-25 20:03:46 [INFO] idaes.init.fs.state_block: State variable initialization completed.
    2021-08-25 20:03:46 [INFO] idaes.init.fs.state_block: Phase equilibrium initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:46 [INFO] idaes.init.fs.state_block: Property initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:46 [INFO] idaes.init.fs.state_block: Property package initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:46 [INFO] idaes.init.fs.state_block: Starting initialization
    2021-08-25 20:03:46 [INFO] idaes.init.fs.state_block: Dew and bubble point initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:46 [INFO] idaes.init.fs.state_block: Equilibrium temperature initialization completed.
    2021-08-25 20:03:46 [INFO] idaes.init.fs.state_block: State variable initialization completed.
    2021-08-25 20:03:46 [INFO] idaes.init.fs.state_block: Phase equilibrium initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:47 [INFO] idaes.init.fs.state_block: Property initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:47 [INFO] idaes.init.fs.state_block: Property package initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:47 [INFO] idaes.init.fs.state_block: Starting initialization
    2021-08-25 20:03:47 [INFO] idaes.init.fs.state_block: Dew and bubble point initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:47 [INFO] idaes.init.fs.state_block: Equilibrium temperature initialization completed.
    2021-08-25 20:03:47 [INFO] idaes.init.fs.state_block: State variable initialization completed.
    2021-08-25 20:03:47 [INFO] idaes.init.fs.state_block: Phase equilibrium initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:47 [INFO] idaes.init.fs.state_block: Property initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:47 [INFO] idaes.init.fs.state_block: Property package initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:47 [INFO] idaes.init.fs.state_block: Starting initialization
    2021-08-25 20:03:47 [INFO] idaes.init.fs.state_block: Dew and bubble point initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:47 [INFO] idaes.init.fs.state_block: Equilibrium temperature initialization completed.
    2021-08-25 20:03:47 [INFO] idaes.init.fs.state_block: State variable initialization completed.
    2021-08-25 20:03:47 [INFO] idaes.init.fs.state_block: Phase equilibrium initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:47 [INFO] idaes.init.fs.state_block: Property initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:47 [INFO] idaes.init.fs.state_block: Property package initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:47 [INFO] idaes.init.fs.state_block: Starting initialization
    2021-08-25 20:03:47 [INFO] idaes.init.fs.state_block: Dew and bubble point initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:47 [INFO] idaes.init.fs.state_block: Equilibrium temperature initialization completed.
    2021-08-25 20:03:47 [INFO] idaes.init.fs.state_block: State variable initialization completed.
    2021-08-25 20:03:47 [INFO] idaes.init.fs.state_block: Phase equilibrium initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:47 [INFO] idaes.init.fs.state_block: Property initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:47 [INFO] idaes.init.fs.state_block: Property package initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:47 [INFO] idaes.init.fs.state_block: Starting initialization
    2021-08-25 20:03:47 [INFO] idaes.init.fs.state_block: Dew and bubble point initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:47 [INFO] idaes.init.fs.state_block: Equilibrium temperature initialization completed.
    2021-08-25 20:03:47 [INFO] idaes.init.fs.state_block: State variable initialization completed.
    2021-08-25 20:03:47 [INFO] idaes.init.fs.state_block: Phase equilibrium initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:47 [INFO] idaes.init.fs.state_block: Property initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:47 [INFO] idaes.init.fs.state_block: Property package initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:47 [INFO] idaes.init.fs.state_block: Starting initialization
    2021-08-25 20:03:47 [INFO] idaes.init.fs.state_block: Dew and bubble point initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:47 [INFO] idaes.init.fs.state_block: Equilibrium temperature initialization completed.
    2021-08-25 20:03:47 [INFO] idaes.init.fs.state_block: State variable initialization completed.
    2021-08-25 20:03:48 [INFO] idaes.init.fs.state_block: Phase equilibrium initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:48 [INFO] idaes.init.fs.state_block: Property initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:48 [INFO] idaes.init.fs.state_block: Property package initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:48 [INFO] idaes.init.fs.state_block: Starting initialization
    2021-08-25 20:03:48 [INFO] idaes.init.fs.state_block: Dew and bubble point initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:48 [INFO] idaes.init.fs.state_block: Equilibrium temperature initialization completed.
    2021-08-25 20:03:48 [INFO] idaes.init.fs.state_block: State variable initialization completed.
    2021-08-25 20:03:48 [INFO] idaes.init.fs.state_block: Phase equilibrium initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:48 [INFO] idaes.init.fs.state_block: Property initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:48 [INFO] idaes.init.fs.state_block: Property package initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:48 [INFO] idaes.init.fs.state_block: Starting initialization
    2021-08-25 20:03:48 [INFO] idaes.init.fs.state_block: Dew and bubble point initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:48 [INFO] idaes.init.fs.state_block: Equilibrium temperature initialization completed.
    2021-08-25 20:03:48 [INFO] idaes.init.fs.state_block: State variable initialization completed.
    2021-08-25 20:03:48 [INFO] idaes.init.fs.state_block: Phase equilibrium initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:48 [INFO] idaes.init.fs.state_block: Property initialization: optimal - Optimal Solution Found.
    2021-08-25 20:03:48 [INFO] idaes.init.fs.state_block: Property package initialization: optimal - Optimal Solution Found.
    Ipopt 3.13.2: 
    
    ******************************************************************************
    This program contains Ipopt, a library for large-scale nonlinear optimization.
     Ipopt is released as open source code under the Eclipse Public License (EPL).
             For more information visit http://projects.coin-or.org/Ipopt
    
    This version of Ipopt was compiled from source code available at
        https://github.com/IDAES/Ipopt as part of the Institute for the Design of
        Advanced Energy Systems Process Systems Engineering Framework (IDAES PSE
        Framework) Copyright (c) 2018-2019. See https://github.com/IDAES/idaes-pse.
    
    This version of Ipopt was compiled using HSL, a collection of Fortran codes
        for large-scale scientific computation.  All technical papers, sales and
        publicity material resulting from use of the HSL codes within IPOPT must
        contain the following acknowledgement:
            HSL, a collection of Fortran codes for large-scale scientific
            computation. See http://www.hsl.rl.ac.uk.
    ******************************************************************************
    
    This is Ipopt version 3.13.2, running with linear solver ma27.
    
    Number of nonzeros in equality constraint Jacobian...:      608
    Number of nonzeros in inequality constraint Jacobian.:        0
    Number of nonzeros in Lagrangian Hessian.............:      612
    
    Total number of variables............................:      252
                         variables with only lower bounds:      108
                    variables with lower and upper bounds:      108
                         variables with only upper bounds:        0
    Total number of equality constraints.................:      250
    Total number of inequality constraints...............:        0
            inequality constraints with only lower bounds:        0
       inequality constraints with lower and upper bounds:        0
            inequality constraints with only upper bounds:        0
    
    iter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls
       0  0.0000000e+00 4.98e-01 4.66e-15  -1.0 0.00e+00    -  0.00e+00 0.00e+00   0
       1  2.9825755e+01 1.39e+00 1.73e+03  -1.0 3.69e+04    -  3.97e-01 9.90e-01h  1
       2  2.9800115e+01 1.60e+00 2.39e+03  -1.0 1.37e+03    -  9.37e-01 9.90e-01h  1
       3  2.9653330e+01 3.23e-01 2.53e+04  -1.0 1.66e+03    -  7.35e-01 9.90e-01h  1
       4  2.9386392e+01 2.02e-02 5.65e+04  -1.0 1.47e+03    -  9.89e-01 1.00e+00h  1
       5  2.9283226e+01 2.13e-04 1.04e+05  -1.0 1.66e+03    -  9.89e-01 1.00e+00f  1
       6  2.9283598e+01 2.79e-08 1.04e+03  -1.0 2.19e+01    -  9.90e-01 1.00e+00h  1
       7  2.9282885e+01 3.35e-07 2.61e+04  -2.5 1.24e+02    -  9.97e-01 1.00e+00f  1
       8  2.9282886e+01 1.73e-12 4.97e-08  -2.5 2.39e-01    -  1.00e+00 1.00e+00h  1
       9  2.9282886e+01 2.87e-10 3.05e+00  -8.6 3.61e+00    -  1.00e+00 1.00e+00h  1
    iter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls
      10  2.9282886e+01 2.88e-12 4.97e-12  -8.6 2.03e-04    -  1.00e+00 1.00e+00h  1
    
    Number of Iterations....: 10
    
                                       (scaled)                 (unscaled)
    Objective...............:   2.9282885686263434e+01    2.9282885686263434e+01
    Dual infeasibility......:   4.9664128054944766e-12    4.9664128054944766e-12
    Constraint violation....:   2.8776980798284058e-12    2.8776980798284058e-12
    Complementarity.........:   2.5059037694316837e-09    2.5059037694316837e-09
    Overall NLP error.......:   2.5059037694316837e-09    2.5059037694316837e-09
    
    
    Number of objective function evaluations             = 11
    Number of objective gradient evaluations             = 11
    Number of equality constraint evaluations            = 11
    Number of inequality constraint evaluations          = 0
    Number of equality constraint Jacobian evaluations   = 11
    Number of inequality constraint Jacobian evaluations = 0
    Number of Lagrangian Hessian evaluations             = 10
    Total CPU secs in IPOPT (w/o function evaluations)   =      0.010
    Total CPU secs in NLP function evaluations           =      0.049
    
    EXIT: Optimal Solution Found.
    

5.0 Display results
-------------------

Let us display the results by running the next cell.

.. code:: ipython3

    print("The SSE at the optimal solution is %0.6f" % obj_value)
    print()
    print("The values for the parameters are as follows:")
    for k,v in parameters.items():
        print(k, "=", v)


.. parsed-literal::

    The SSE at the optimal solution is 29.282886
    
    The values for the parameters are as follows:
    fs.properties.PR_kappa[bmimPF6,carbon_dioxide] = -0.40714251766508386
    fs.properties.PR_kappa[carbon_dioxide,bmimPF6] = 0.020593691531709476


Now we can use this parameters and include them in the configuration
dictionary. We can also use
``m.fs.properties = GenericParameterBlock(default=configuration)`` to
solve unit models.

