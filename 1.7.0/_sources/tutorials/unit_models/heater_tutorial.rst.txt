Tutorial: Heater Unit Model with Ideal Property Package
=======================================================

|image0|

In this tutorial, we will heat a liquid mixture of benzene-toluene using
a simple heater unit model, and an ideal property package with the
phases specified to liquid apriori. The inlet specifications are as
follows:

-  Flow Rate = 1 kmol/hr
-  Mole fraction (Benzene) = 0.4
-  Mole fraction (Toluene) = 0.6
-  Pressure = 101325 Pa
-  Temperature = 353 K

In addition to the inlet specifications, there is one additional unit
level specification that needs to be set: \* Option 1: Specify the
outlet temperature \* Option 2: Specify the heat duty

Therefore, in this tutorial, we will simulate the following cases:

-  Case 1: Compute the heat duty (J/s) required to heat the mixture to
   363 K.
-  Case 2: Compute the outlet temperature of the mixture when fixing the
   heat duty to 2 J/s.

IDAES documentation reference for heater model:
https://idaes-pse.readthedocs.io/en/stable/models/heater.html#

.. |image0| image:: heater_2.svg

Setting up the problem in IDAES
-------------------------------

.. code:: ipython3

    # Import objects from pyomo package 
    from pyomo.environ import ConcreteModel, SolverFactory, value
    from pyomo.opt import TerminationCondition, SolverStatus
    
    # Import the main FlowsheetBlock from IDAES. The flowsheet block will contain the unit model
    from idaes.core import FlowsheetBlock
    
    # Import idaes logger to set output levels
    import idaes.logger as idaeslog
    
    # Create the ConcreteModel and the FlowsheetBlock, and attach the flowsheet block to it.
    m = ConcreteModel()
    
    m.fs = FlowsheetBlock(default={"dynamic": False}) # dynamic or ss flowsheet needs to be specified here
    
    
    # Import the BTX_ideal property package to create a properties block for the flowsheet
    from idaes.generic_models.properties.activity_coeff_models import BTX_activity_coeff_VLE
    
    # Add properties parameter block to the flowsheet with specifications
    m.fs.properties = BTX_activity_coeff_VLE.BTXParameterBlock(default={"valid_phase":
                                                         'Liq',
                                                         "activity_coeff_model":
                                                         "Ideal"})

.. code:: ipython3

    # Import heater unit model from the model library
    from idaes.generic_models.unit_models.heater import Heater
    
    # Create an instance of the heater unit, attaching it to the flowsheet
    # Specify that the property package to be used with the heater is the one we created earlier.
    m.fs.heater = Heater(default={"property_package": m.fs.properties})
    
    # Import the degrees_of_freedom function from the idaes.core.util.model_statistics package
    # DOF = Number of Model Variables - Number of Model Constraints
    from idaes.core.util.model_statistics import degrees_of_freedom
    
    
    # Call the degrees_of_freedom function, get intitial DOF
    DOF_initial = degrees_of_freedom(m)
    print("The initial DOF is {0}".format(DOF_initial))
    



.. parsed-literal::

    The initial DOF is 6


.. code:: ipython3

    # Fix the BT stream inlet conditions
    m.fs.heater.inlet.flow_mol.fix(1*1000/3600) # converting to mol/s as unit basis is mol/s
    m.fs.heater.inlet.mole_frac_comp[0, "benzene"].fix(0.4)
    m.fs.heater.inlet.mole_frac_comp[0, "toluene"].fix(0.6)
    m.fs.heater.inlet.pressure.fix(101325) # Pa
    m.fs.heater.inlet.temperature.fix(353) # K

Case 1: Fix Outlet Temperature
------------------------------

.. code:: ipython3

    m.fs.heater.outlet.temperature.fix(363)
    # Call the degrees_of_freedom function, get final DOF
    DOF_final = degrees_of_freedom(m)
    print("The final DOF is {0}".format(DOF_final))


.. parsed-literal::

    The final DOF is 0


Flowsheet Initialization
~~~~~~~~~~~~~~~~~~~~~~~~

IDAES includes pre-written initialization routines for all unit models.
The output from initialization can be set to 7 different levels
depending on the details required by the user. In general, when a
particular output level is set, any information at that level and above
gets picked up by logger. The default level taken by the logger is INFO.
More information on these levels can be found in the IDAES
documentation: https://idaes-pse.readthedocs.io/en/latest/logging.html

.. code:: ipython3

    # Initialize the flowsheet, and set the output at WARNING
    m.fs.heater.initialize(outlvl=idaeslog.WARNING)
    # From the output it can be inferred that since there are no errors or warnings encountered during initialization, nothing is displayed  

.. code:: ipython3

    # Initialize the flowsheet, and set the output at INFO_HIGH
    m.fs.heater.initialize(outlvl=idaeslog.INFO_HIGH)
    # At INFO_HIGH level, details of all the initialization steps are displayed


.. parsed-literal::

    2020-10-08 18:30:45 [INFO] idaes.init.fs.heater.control_volume.properties_in: Initialization Step 1 skipped.
    2020-10-08 18:30:45 [INFO] idaes.init.fs.heater.control_volume.properties_in: Initialization Step 2 optimal - Optimal Solution Found.
    2020-10-08 18:30:45 [INFO] idaes.init.fs.heater.control_volume.properties_in: Initialization Step 3 optimal - Optimal Solution Found.
    2020-10-08 18:30:45 [INFO] idaes.init.fs.heater.control_volume.properties_in: Initialization Step 4 optimal - Optimal Solution Found.
    2020-10-08 18:30:45 [INFO] idaes.init.fs.heater.control_volume.properties_in: Initialization Step 5 optimal - Optimal Solution Found.
    2020-10-08 18:30:45 [INFO] idaes.init.fs.heater.control_volume.properties_out: Initialization Step 1 skipped.
    2020-10-08 18:30:45 [INFO] idaes.init.fs.heater.control_volume.properties_out: Initialization Step 2 optimal - Optimal Solution Found.
    2020-10-08 18:30:45 [INFO] idaes.init.fs.heater.control_volume.properties_out: Initialization Step 3 optimal - Optimal Solution Found.
    2020-10-08 18:30:45 [INFO] idaes.init.fs.heater.control_volume.properties_out: Initialization Step 4 optimal - Optimal Solution Found.
    2020-10-08 18:30:45 [INFO] idaes.init.fs.heater.control_volume.properties_out: Initialization Step 5 optimal - Optimal Solution Found.
    2020-10-08 18:30:45 [INFO] idaes.init.fs.heater.control_volume.properties_out: State Released.
    2020-10-08 18:30:45 [INFO] idaes.init.fs.heater.control_volume: Initialization Complete
    2020-10-08 18:30:45 [INFO] idaes.init.fs.heater: Initialization Step 1 Complete.
    2020-10-08 18:30:45 [INFO] idaes.init.fs.heater: Initialization Step 2 optimal - Optimal Solution Found.
    2020-10-08 18:30:45 [INFO] idaes.init.fs.heater.control_volume.properties_in: State Released.
    2020-10-08 18:30:45 [INFO] idaes.init.fs.heater: Initialization Complete: optimal - Optimal Solution Found


Obtaining Simulation Results
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code:: ipython3

    # Solve the simulation using ipopt
    # Note: If the degrees of freedom = 0, we have a square problem
    opt = SolverFactory('ipopt')
    solve_status = opt.solve(m, tee=True)



.. parsed-literal::

    Ipopt 3.13.2: 
    
    ******************************************************************************
    This program contains Ipopt, a library for large-scale nonlinear optimization.
     Ipopt is released as open source code under the Eclipse Public License (EPL).
             For more information visit http://projects.coin-or.org/Ipopt
    
    This version of Ipopt was compiled from source code available at
        https://github.com/IDAES/Ipopt as part of the Institute for the Design of
        Advanced Energy Systems Process Systems Engineering Framework (IDAES PSE
        Framework) Copyright (c) 2018-2019. See https://github.com/IDAES/idaes-pse.
    
    This version of Ipopt was compiled using HSL, a collection of Fortran codes
        for large-scale scientific computation.  All technical papers, sales and
        publicity material resulting from use of the HSL codes within IPOPT must
        contain the following acknowledgement:
            HSL, a collection of Fortran codes for large-scale scientific
            computation. See http://www.hsl.rl.ac.uk.
    ******************************************************************************
    
    This is Ipopt version 3.13.2, running with linear solver ma27.
    
    Number of nonzeros in equality constraint Jacobian...:       45
    Number of nonzeros in inequality constraint Jacobian.:        0
    Number of nonzeros in Lagrangian Hessian.............:       12
    
    Total number of variables............................:       17
                         variables with only lower bounds:        2
                    variables with lower and upper bounds:        6
                         variables with only upper bounds:        0
    Total number of equality constraints.................:       17
    Total number of inequality constraints...............:        0
            inequality constraints with only lower bounds:        0
       inequality constraints with lower and upper bounds:        0
            inequality constraints with only upper bounds:        0
    
    iter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls
       0  0.0000000e+00 5.68e-14 1.00e+00  -1.0 0.00e+00    -  0.00e+00 0.00e+00   0
    
    Number of Iterations....: 0
    
                                       (scaled)                 (unscaled)
    Objective...............:   0.0000000000000000e+00    0.0000000000000000e+00
    Dual infeasibility......:   0.0000000000000000e+00    0.0000000000000000e+00
    Constraint violation....:   1.5367977181212893e-16    5.6843418860808015e-14
    Complementarity.........:   0.0000000000000000e+00    0.0000000000000000e+00
    Overall NLP error.......:   1.5367977181212893e-16    5.6843418860808015e-14
    
    
    Number of objective function evaluations             = 1
    Number of objective gradient evaluations             = 1
    Number of equality constraint evaluations            = 1
    Number of inequality constraint evaluations          = 0
    Number of equality constraint Jacobian evaluations   = 1
    Number of inequality constraint Jacobian evaluations = 0
    Number of Lagrangian Hessian evaluations             = 0
    Total CPU secs in IPOPT (w/o function evaluations)   =      0.000
    Total CPU secs in NLP function evaluations           =      0.000
    
    EXIT: Optimal Solution Found.
    

View Results
~~~~~~~~~~~~

.. code:: ipython3

    # Display Heat Duty only
    m.fs.heater.heat_duty.display()


.. parsed-literal::

    heat_duty : Size=1, Index=fs.time
        Key : Lower : Value             : Upper : Fixed : Stale : Domain
        0.0 :  None : 459.1014772222224 :  None : False : False :  Reals


.. code:: ipython3

    # Display a readable report
    m.fs.heater.report()


.. parsed-literal::

    
    ====================================================================================
    Unit : fs.heater                                                           Time: 0.0
    ------------------------------------------------------------------------------------
        Unit Performance
    
        Variables: 
    
        Key       : Value  : Fixed : Bounds
        Heat Duty : 459.10 : False : (None, None)
    
    ------------------------------------------------------------------------------------
        Stream Table
                                  Inlet     Outlet  
        flow_mol                  0.27778    0.27778
        mole_frac_comp benzene    0.40000    0.40000
        mole_frac_comp toluene    0.60000    0.60000
        temperature                353.00     363.00
        pressure               1.0132e+05 1.0132e+05
    ====================================================================================


Case 2: Fix Heat Duty
---------------------

.. code:: ipython3

    # Fix heat duty and solve the model 
    m.fs.heater.outlet.temperature.unfix()
    m.fs.heater.heat_duty.fix(459.10147722222354)
    solve_status = opt.solve(m, tee=True)


.. parsed-literal::

    Ipopt 3.13.2: 
    
    ******************************************************************************
    This program contains Ipopt, a library for large-scale nonlinear optimization.
     Ipopt is released as open source code under the Eclipse Public License (EPL).
             For more information visit http://projects.coin-or.org/Ipopt
    
    This version of Ipopt was compiled from source code available at
        https://github.com/IDAES/Ipopt as part of the Institute for the Design of
        Advanced Energy Systems Process Systems Engineering Framework (IDAES PSE
        Framework) Copyright (c) 2018-2019. See https://github.com/IDAES/idaes-pse.
    
    This version of Ipopt was compiled using HSL, a collection of Fortran codes
        for large-scale scientific computation.  All technical papers, sales and
        publicity material resulting from use of the HSL codes within IPOPT must
        contain the following acknowledgement:
            HSL, a collection of Fortran codes for large-scale scientific
            computation. See http://www.hsl.rl.ac.uk.
    ******************************************************************************
    
    This is Ipopt version 3.13.2, running with linear solver ma27.
    
    Number of nonzeros in equality constraint Jacobian...:       46
    Number of nonzeros in inequality constraint Jacobian.:        0
    Number of nonzeros in Lagrangian Hessian.............:       13
    
    Total number of variables............................:       17
                         variables with only lower bounds:        3
                    variables with lower and upper bounds:        6
                         variables with only upper bounds:        0
    Total number of equality constraints.................:       17
    Total number of inequality constraints...............:        0
            inequality constraints with only lower bounds:        0
       inequality constraints with lower and upper bounds:        0
            inequality constraints with only upper bounds:        0
    
    iter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls
       0  0.0000000e+00 1.08e-12 1.00e+00  -1.0 0.00e+00    -  0.00e+00 0.00e+00   0
    
    Number of Iterations....: 0
    
                                       (scaled)                 (unscaled)
    Objective...............:   0.0000000000000000e+00    0.0000000000000000e+00
    Dual infeasibility......:   0.0000000000000000e+00    0.0000000000000000e+00
    Constraint violation....:   2.9199156644304494e-15    1.0800249583553523e-12
    Complementarity.........:   0.0000000000000000e+00    0.0000000000000000e+00
    Overall NLP error.......:   2.9199156644304494e-15    1.0800249583553523e-12
    
    
    Number of objective function evaluations             = 1
    Number of objective gradient evaluations             = 1
    Number of equality constraint evaluations            = 1
    Number of inequality constraint evaluations          = 0
    Number of equality constraint Jacobian evaluations   = 1
    Number of inequality constraint Jacobian evaluations = 0
    Number of Lagrangian Hessian evaluations             = 0
    Total CPU secs in IPOPT (w/o function evaluations)   =      0.000
    Total CPU secs in NLP function evaluations           =      0.000
    
    EXIT: Optimal Solution Found.
    

.. code:: ipython3

    # Display outlet temperature only
    m.fs.heater.outlet.temperature.display()


.. parsed-literal::

    IndexedVar : Size=1, Index=fs.time
        Key : Lower : Value : Upper : Fixed : Stale : Domain
        0.0 :     0 : 363.0 :  None : False : False : NonNegativeReals


.. code:: ipython3

    # Display a readable report
    m.fs.heater.report()


.. parsed-literal::

    
    ====================================================================================
    Unit : fs.heater                                                           Time: 0.0
    ------------------------------------------------------------------------------------
        Unit Performance
    
        Variables: 
    
        Key       : Value  : Fixed : Bounds
        Heat Duty : 459.10 :  True : (None, None)
    
    ------------------------------------------------------------------------------------
        Stream Table
                                  Inlet     Outlet  
        flow_mol                  0.27778    0.27778
        mole_frac_comp benzene    0.40000    0.40000
        mole_frac_comp toluene    0.60000    0.60000
        temperature                353.00     363.00
        pressure               1.0132e+05 1.0132e+05
    ====================================================================================


Plotting Q vs. Outlet Temperature
---------------------------------

.. code:: ipython3

    # Heat Duty vs Outlet Temperature
    import matplotlib.pyplot as plt
    import numpy as np
    
    # Unfix the heat duty from case 2
    m.fs.heater.heat_duty.unfix()
    
    # Create a list of outlet temperatures for which corresponding heat duty values need to be obtained
    outlet_temp_fixed = [91.256405+273.15,
    90.828456+273.15,
    86.535145+273.15,
    89.383218+273.15,
    93.973657+273.15,
    85.377274+273.15,
    92.399101+273.15,
    94.151562+273.15,
    87.564579+273.15,
    88.767855+273.15]
    
    # Fix the outlet temperature values and solve the model to obtain the heat duties
    heat_duty = []
    for temp in outlet_temp_fixed:
        m.fs.heater.outlet.temperature.fix(temp)
        solve_status=opt.solve(m)
        if solve_status.solver.termination_condition == TerminationCondition.optimal:
            heat_duty.append(m.fs.heater.heat_duty[0].value) 
    
    


.. code:: ipython3

    # Plotting the results
    
    plt.figure("Q vs. Temperature")
    plt.plot(outlet_temp_fixed,heat_duty,'bo')
    plt.xlim(358.15,368.15)
    plt.ylim(250,700)
    plt.xlabel('Outlet Temperature (K)')
    plt.ylabel('Heat Duty (W)')
    plt.grid()



.. image:: output_21_0.png


