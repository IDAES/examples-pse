Data Reconciliation for a Single Unit - Economizer
==================================================

This notebook demonstrates data reconciliation with a single unit model,
an economizer. Data for this example was generated by adding noise to
supercritical power plant simulations.

Why reconcile data?
~~~~~~~~~~~~~~~~~~~

Data reconciliation uses mass and energy balances along with redundant
measurements to improve data quality by:

1. reducing measurement error,
2. ensuring measurements satisfy mass and energy balances, and
3. filling in unmeasured quantities.

Data reconciliation is used to refine process data before parameter
estimation.

1. Read Plant Data
------------------

The first step is to read in process data. In this case, data was
simulated by adding measurement error to supercritical steam cycle
simulation results. IDAES includes functions to read process data,
convert units to match a model, and map data to a model.

.. code:: ipython3

    # IDAES module with functions to read, analyze and visualize plant data
    import idaes.dmf.model_data as da
    # Suppress some warnings
    from idaes.logger import getLogger
    import logging
    getLogger('idaes.core').setLevel(logging.ERROR)

Process data is contained in two CSV files, a data file and a metadata
file. The first column in the data file is row indexes and the first row
is process measurement tags. The index column has an entry for each data
row, and is often a time-stamp. The data file format is illustrated by
the table below.

====== ========= ========= ========== =
\      tag1      tag2      tag3       …
====== ========= ========= ========== =
index1 data(1,1) data(1,2) data(1, 3) …
index2 data(2,1) data(2,2) data(2, 3) …
…      …         …         …          …
====== ========= ========= ========== =

The metadata file contains information about the tags including units of
measurement, description, and model mapping information. The meta data
format is show below, any of the columns my be empty.

|       \| \| \| \| \|

\|——-|— —————|—————|——————-|—————————————————–\| \| tag1 \| model
reference 1 \| description 1 \| unit of measure 1 \| Additional
comments, additional columns are ignored \| \| tag2 \| model reference 2
\| description 2 \| unit of measure 2 \| … \| \| tag3 \| model reference
3 \| description 3 \| unit of measure 3 \| … \| \| … \| … \| … \| … \| …
\|

Once the process data is read in, the data is assigned to bins based on
the value in a given column, in this case gross power. Dividing the data
into bins allows rough estimation of measurement uncertainty.

.. code:: ipython3

    # Read data and column metadata
    df, df_meta = da.read_data("plant_data.csv", "plant_data_meta.csv")
    
    # Add bin information where the data is sorted into 5 MW bins based on the "GROSS_POWER" column
    # A bin number column is added along with a column for nominal gross power in the bin. 
    bin_count = da.bin_data(df, bin_by="POWER_GROSS", bin_no="bin_no", bin_nom="bin_power", bin_size=5e6)
    
    # Calculate the standard deviation by bin for each column.  The resulting standard devations can be 
    # accessed like so: bin_stdev[bin number][column name]
    bin_stdev = da.bin_stdev(df, bin_no="bin_no")

It can be useful to visualize the measurement data and estimated
uncertainty. The following creates box and whisker plots for each tag
based on the data bins. A large number of plots may be created, so to
manage them more easily, they are saved as PDFs and merged into a single
multi-page PDF document. The deafault file name for the resulting PDF is
“data_plot_book.pdf.”

.. code:: ipython3

    # Create a pdf book of plots that shows box and whisker plots for each column by bin
    import os
    if not os.path.isfile("data_plot_book.pdf"):
        da.data_plot_book(df, bin_nom="bin_power", xlabel="gross power (W)", metadata=df_meta, file="data_plot_book.pdf")
    # There should now be a data_plot_book.pdf file in this directory

2. Create Unit model
--------------------

Now that we have the plant data, we need to create a unit model that we
can use for data reconciliation. Although we need a model that has just
mass and energy balances and feasibility constraints for the data
reconciliation problem, we start with the full economizer model here.
Using the same model for data reconciliation, parameter estimation,
validation, and simulation reduces the work required to move between
steps in the workflow.

Once the full model is created, constraints that are not needed for data
reconciliation can be deactivated.

.. code:: ipython3

    # Import models
    from idaes.core import FlowsheetBlock
    from idaes.power_generation.properties.flue_gas_ideal import FlueGasParameterBlock
    from idaes.generic_models.properties import iapws95
    from idaes.power_generation.unit_models.boiler_heat_exchanger import (
        BoilerHeatExchanger, 
        TubeArrangement, 
        DeltaTMethod
    )
    import pyomo.environ as pyo

.. code:: ipython3

    # Create flowsheet with economizer
    m = pyo.ConcreteModel()
    m.fs = FlowsheetBlock(default={"dynamic": False})
    m.fs.prop_water = iapws95.Iapws95ParameterBlock()
    m.fs.prop_fluegas = FlueGasParameterBlock()
    
    m.fs.econ = BoilerHeatExchanger(default={
            "side_1_property_package": m.fs.prop_water,
            "side_2_property_package": m.fs.prop_fluegas,
            "has_pressure_change": True,
            "has_holdup": False,
            "delta_T_method": DeltaTMethod.counterCurrent,
            "tube_arrangement": TubeArrangement.inLine,
            "side_1_water_phase": "Liq",
            "has_radiation": False
        }
    )


.. parsed-literal::

    2022-03-08 01:20:44 [WARNING] idaes.power_generation.unit_models.boiler_heat_exchanger: 'DeltaTMethod' is deprecated use 'HeatExchangerFlowPattern' This will be removed in IDAES 3.0
    2022-03-08 01:20:44 [WARNING] idaes.power_generation.unit_models.boiler_heat_exchanger: Config item delta_T_method is deprecated use flow_pattern. Will be removed in IDAES 3.0.
    2022-03-08 01:20:44 [WARNING] idaes.power_generation.unit_models.boiler_heat_exchanger: 'DeltaTMethod' is deprecated use 'HeatExchangerFlowPattern' This will be removed in IDAES 3.0
    2022-03-08 01:20:44 [WARNING] idaes.power_generation.unit_models.boiler_heat_exchanger: Config item side_1_property_package is deprecated. Will be removed in IDAES 3.0.
    2022-03-08 01:20:44 [WARNING] idaes.power_generation.unit_models.boiler_heat_exchanger: Config item side_2_property_package is deprecated. Will be removed in IDAES 3.0.


.. code:: ipython3

    # Set up and initialize the model
    
    # The steam properties use enthalpy as a state variable, so use the known 
    # temperature and pressure to calculate the feedwater inlet enthalpy
    h = pyo.value(iapws95.htpx(563.706*pyo.units.K, 2.5449e7*pyo.units.Pa))
    
    m.fs.econ.side_1_inlet.flow_mol[0].fix(24678.26) # mol/s
    m.fs.econ.side_1_inlet.enth_mol[0].fix(h) #J/mol         
    m.fs.econ.side_1_inlet.pressure[0].fix(2.5449e7) # Pa
    
    # Set the flue gas flow and composition
    fg_rate = 28.3876e3  # mol/s equivalent of ~1930.08 klb/hr
    fg_comp = { # mol fraction of flue gas components
        "H2O":8.69/100,
        "CO2":14.49/100,
        "O2":2.47/100,
        "NO":0.0006,
        "SO2":0.002,
    }
    # The rest is N2
    fg_comp["N2"] = 1 - sum(fg_comp[i] for i in fg_comp)
    
    # Set economizer inlets
    for c in fg_comp:
        m.fs.econ.side_2.properties_in[0].flow_mol_comp[c].fix(fg_rate*fg_comp[c])    
    m.fs.econ.side_2_inlet.temperature[0].fix(682.335)  # K
    m.fs.econ.side_2_inlet.pressure[0].fix(100145)  # Pa
    
    # Set economizer design variables and parameters
    ITM = 0.0254  # inch to meter conversion
    # Based on NETL Baseline Report Rev4
    m.fs.econ.tube_thickness.fix(0.188*ITM)  # tube thickness
    m.fs.econ.tube_di.fix((2.0 - 2.0 * 0.188)*ITM) # calc inner diameter
    m.fs.econ.pitch_x.fix(3.5*ITM)
    m.fs.econ.pitch_y.fix(5.03*ITM)
    m.fs.econ.tube_length.fix(53.41*12*ITM)  # use tube length (53.41 ft)
    m.fs.econ.tube_nrow.fix(36*2.5) # use to match baseline performance
    m.fs.econ.tube_ncol.fix(130) # 130 from thermoflow
    m.fs.econ.nrow_inlet.fix(2)
    m.fs.econ.delta_elevation.fix(50)
    m.fs.econ.tube_r_fouling = 0.000176
    m.fs.econ.shell_r_fouling = 0.00088
    m.fs.econ.fcorrection_htc.fix(1.5)
    m.fs.econ.fcorrection_dp_tube.fix(1.0)
    m.fs.econ.fcorrection_dp_shell.fix(1.0)

.. code:: ipython3

    # Initialize economizer
    m.fs.econ.initialize(
        state_args_1={
            "flow_mol": m.fs.econ.side_1_inlet.flow_mol[0].value,
            "pressure": m.fs.econ.side_1_inlet.pressure[0].value,
            "enth_mol": m.fs.econ.side_1_inlet.enth_mol[0].value,
        },
        state_args_2={
            "flow_component":{
                "H2O": m.fs.econ.side_2_inlet.flow_mol_comp[0, "H2O"].value,
                "CO2": m.fs.econ.side_2_inlet.flow_mol_comp[0, "CO2"].value,
                "N2": m.fs.econ.side_2_inlet.flow_mol_comp[0, "N2"].value,
                "O2": m.fs.econ.side_2_inlet.flow_mol_comp[0, "O2"].value,
                "NO": m.fs.econ.side_2_inlet.flow_mol_comp[0, "NO"].value,
                "SO2": m.fs.econ.side_2_inlet.flow_mol_comp[0, "SO2"].value,
            },
            "temperature": m.fs.econ.side_2_inlet.temperature[0].value,
            "pressure": m.fs.econ.side_2_inlet.pressure[0].value,
        }
    )


.. parsed-literal::

    2022-03-08 01:20:44 [INFO] idaes.init.fs.econ.tube: Initialization Complete
    2022-03-08 01:20:44 [INFO] idaes.init.fs.econ.shell.properties_in: Initialisation Complete, optimal - Optimal Solution Found.
    2022-03-08 01:20:44 [INFO] idaes.init.fs.econ.shell.properties_out: Initialisation Complete, optimal - Optimal Solution Found.
    2022-03-08 01:20:44 [INFO] idaes.init.fs.econ.shell.properties_out: fs.econ.shell.properties_out State Released.
    2022-03-08 01:20:44 [INFO] idaes.init.fs.econ.shell: Initialization Complete
    2022-03-08 01:20:44 [INFO] idaes.init.fs.econ: fs.econ Initialisation Step 1 Complete.
    2022-03-08 01:20:44 [INFO] idaes.init.fs.econ.shell.properties_in: fs.econ.shell.properties_in State Released.
    2022-03-08 01:20:44 [INFO] idaes.init.fs.econ: fs.econ Initialisation Complete.


3. Simplify to Mass and Energy Balances
---------------------------------------

For data reconciliation, the model should be reduced to mass and energy
balances and potentially limited performance constraints to keep the
results feasible.

.. code:: ipython3

    # Deactivate constraints for heat transfer
    m.fs.econ.overall_heat_transfer_coefficient_eqn.deactivate()
    m.fs.econ.rcond_wall_eqn.deactivate()
    m.fs.econ.hconv_shell_total_eqn.deactivate()
    m.fs.econ.hconv_shell_conv_eqn.deactivate()
    m.fs.econ.N_Nu_shell_eqn.deactivate()
    m.fs.econ.N_Pr_shell_eqn.deactivate()
    m.fs.econ.deltaP_shell_eqn.deactivate()
    m.fs.econ.friction_factor_shell_eqn.deactivate()
    m.fs.econ.N_Re_shell_eqn.deactivate()
    m.fs.econ.v_shell_eqn.deactivate()
    m.fs.econ.hconv_tube_eqn.deactivate()
    m.fs.econ.N_Nu_tube_eqn.deactivate()
    m.fs.econ.N_Pr_tube_eqn.deactivate()
    m.fs.econ.deltaP_tube_eqn.deactivate()
    m.fs.econ.deltaP_tube_uturn_eqn.deactivate()
    m.fs.econ.deltaP_tube_friction_eqn.deactivate()
    m.fs.econ.friction_factor_tube_eqn.deactivate()
    m.fs.econ.N_Re_tube_eqn.deactivate()
    m.fs.econ.v_tube_eqn.deactivate()

4. Map Data to the Model
------------------------

Although the model mapping can be included in the tag metadata file,
here we just add the mapping information to the tag metadata after
reading the data. Sometime a data set may be used with more than one
model or you may want to examine data before creating a model, in which
case it is convenient to defer mapping the data to the model as we have
done here.

.. code:: ipython3

    df_meta["ECON_OUT_F"]["reference_string"] = "m.fs.econ.side_1.properties_out[:].flow_mol"
    df_meta["ECON_OUT_T"]["reference_string"] = "m.fs.econ.side_1.properties_out[:].temperature"
    df_meta["ECON_OUT_P"]["reference_string"] = "m.fs.econ.side_1.properties_out[:].pressure"
    df_meta["BFW_F"]["reference_string"] = "m.fs.econ.side_1.properties_in[:].flow_mol"
    df_meta["BFW_T"]["reference_string"] = "m.fs.econ.side_1.properties_in[:].temperature"
    df_meta["BFW_P"]["reference_string"] = "m.fs.econ.side_1.properties_in[:].pressure"
    df_meta["FG_2_ECON_Fm"]["reference_string"] = "m.fs.econ.side_2.properties_in[:].flow_mass"
    df_meta["FG_2_ECON_T"]["reference_string"] = "m.fs.econ.side_2.properties_in[:].temperature"
    df_meta["FG_2_ECON_P"]["reference_string"] = "m.fs.econ.side_2.properties_in[:].pressure"
    df_meta["FG_2_AIRPH_Fm"]["reference_string"] = "m.fs.econ.side_2.properties_out[:].flow_mass"
    df_meta["FG_2_AIRPH_T"]["reference_string"] = "m.fs.econ.side_2.properties_out[:].temperature"
    df_meta["FG_2_AIRPH_P"]["reference_string"] = "m.fs.econ.side_2.properties_out[:].pressure"

.. code:: ipython3

    # Add the model references to the tag metadata based on the strings above.
    da.upadate_metadata_model_references(m, df_meta)

.. code:: ipython3

    # Create a dictionary of data tags that we want to use for the data reconciliation problem.  
    # The key is the tag and the value is a reference to a quantity in the model.
    data_tags = {k:v["reference"][0] for k, v in df_meta.items() if v["reference"] is not None}

.. code:: ipython3

    # Now for result output, the data reconciliation usually can give full stream information for a flowsheet
    # including quantities that are unmeasured.  To more easily use the results, it is good practice to map most of
    # the data reconciliation results to flowsheet stream names.  
    import idaes.core.util.tables as ta
    
    # This function creates a dictionary of streams based of streams based on model arcs.  The function
    # also takes an addtional set of stream-like objects for add to the stream dictionary.  In this case,
    # this is a single unit and the flowsheet doesn't contain any arcs, so we add the economized inlet and
    # outlet ports to the stream dictionary.
    stream_dict = ta.arcs_to_stream_dict(
        m, 
        additional={
            "BFW": m.fs.econ.side_1_inlet,
            "ECON_OUT": m.fs.econ.side_1_outlet,
            "FG_2_ECON": m.fs.econ.side_2_inlet,
            "FG_2_AIRPH": m.fs.econ.side_2_outlet,
        },
        sort=True,
    )
    
    # The next function converts the stream dictionary into a dictionary of state block representing the
    # streams at a given time point.  In this case, we have a steady state model, so we only have one 
    # time point (0).
    state_dict = ta.stream_states_dict(stream_dict, time_point=0)
    
    # The 'tag_state_quantities()' function below iterates through the state block dictionary and 
    # creates tags for the listed attributes by combining the state block label with the attribute label 
    # in the labels argument.  For example, pressure in the S001 state block would get the tag 'S001_P'.
    recon_tags = ta.tag_state_quantities(
        blocks=state_dict, 
        attributes=(
            "flow_mass", 
            "flow_mol", 
            "enth_mol", 
            "temperature", 
            "pressure", 
            ("flow_mol_comp", "O2"),
            ("flow_mol_comp", "NO"),
            ("flow_mol_comp", "N2"),
            ("flow_mol_comp", "SO2"),
            ("flow_mol_comp", "CO2"),
            ("flow_mol_comp", "H2O"),
        ), 
        labels=("_Fm", "_F", "_h", "_T", "_P", "_F[O2]", "_F[NO]", "_F[N2]", "_F[SO2]", "_F[CO2]", "_F[H2O]"),
    )
    
    # Any addtional tags can be added.  This is required for tags that cannot be systematically generated 
    # from the model streams.
    recon_tags["ECON_Q"] = m.fs.econ.heat_duty[0]

5. View model flowsheet
-----------------------

Model results or other quantities can be added to a process flow
diagram. The PFD was drawn beforehand and the model results are added to
tagged locations on the PFD.

.. code:: ipython3

    from idaes.core.util.misc import svg_tag  # utility to place numbers/text in an SVG
    
    with open("econ.svg", "r") as f:
        s = svg_tag(svg=f, tags={"subtitle":"Initialized Model"})
        s = svg_tag(svg=s, tags=recon_tags, outfile="econ_init.svg")


.. parsed-literal::

    WARNING: DEPRECATED: idaes.core.util.misc.svg_tag has moved to
        idaes.core.util.tags.svg_tag  (deprecated in 1.12) (called from
        /home/runner/.conda/envs/idaes-env/lib/python3.8/site-
        packages/IPython/core/interactiveshell.py:3524)
    WARNING: DEPRECATED: DEPRECATED: svg_tag, the tags, tag_format and
        tag_format_default arguments are deprecated use tag_group instead.
        (deprecated in 1.12) (called from /home/runner/.conda/envs/idaes-
        env/lib/python3.8/site-packages/idaes/core/util/misc.py:146)


.. code:: ipython3

    from IPython.display import SVG, display
    
    display(SVG(s))



.. image:: output_21_0.svg


6. Write Objective
------------------

Next we write the objective function and additional constraints for the
data reconciliation problem. The objective is

.. math:: \min \sum_i \left(\frac{x_{\text{data}, i} - x_{\text{model}, i}}{\sigma_i} \right)^2

Where :math:`i \in \{\text{Measured Quantities}\}` and :math:`\sigma_i`
is the standard deviation of measurement i. In this case, for lack of
better information, the standard deviation was estimated by binning the
data and calculating the standard deviation of each measured variable in
each bin.

.. code:: ipython3

    # Add model parameters to contain measured data.  These are mutable so we can set a specific data point later.
    m.data = pyo.Param(data_tags, mutable=True, doc="Process data for a specific point in time.")
    m.data_stdev = pyo.Param(data_tags, mutable=True, doc="Process data standard deviation.")

.. code:: ipython3

    # The 'set_data' function below takes data from the process data DataFrame and updates the
    # data parameters in the model.
    def set_data(m, df, data_tags, index=None, indexindex=None):
        if index is None:
            index = df.index[indexindex]
        m.bin_no = df.iloc[index]["bin_no"]
        for t in data_tags:
            m.data[t] = df.iloc[index][t]
            m.data_stdev[t] = bin_stdev[m.bin_no][t]

.. code:: ipython3

    # So we have something reasonable to start, set the data attached to the model to the first 
    # data point.
    set_data(m, df, data_tags, indexindex=0)

Add an expression for error divided by the standard deviation, and use
it to write the data reconciliation objective function.

.. code:: ipython3

    @m.Expression(data_tags)
    def err(m, i):
        return (m.data[i] - data_tags[i])/m.data_stdev[i]
    
    m.objective = pyo.Objective(expr=sum(m.err[t]**2 for t in m.err))

Add constraints that ensure reasonable temperature and keep the flue gas
composition correct.

.. code:: ipython3

    # Limit temperature approach
    m.c1 = pyo.Constraint(expr=m.fs.econ.deltaT_1[0] >= 1.0)
    m.c2 = pyo.Constraint(expr=m.fs.econ.deltaT_2[0] >= 1.0)
    
    # Constrain flue gas composition
    m.flow_fg = pyo.Var(initialize=fg_rate)
    @m.Constraint(fg_comp)
    def eq_fg_comp(b, c):
        return m.fs.econ.side_2.properties_in[0].flow_mol_comp[c] == fg_comp[c]*m.flow_fg

7. Solve Optimization
---------------------

Now we need to solve the data reconciliation problem for every data
point. The important results are stored in two DataFrames ``df_result``,
which contains results tagged based on model stream names to be used in
the parameter estimation step and ``df_result_cmp`` which contains
reconciled data based on the original measurement tags and can be used
to compare the original measurements to the reconciled results.

.. code:: ipython3

    # Make sure the inlet and outlet ports are unfixed.  We want to leave these free 
    # to best match the data.
    m.fs.econ.side_1_inlet.unfix()
    m.fs.econ.side_2_inlet.unfix()
    m.fs.econ.side_1_outlet.unfix()
    m.fs.econ.side_2_outlet.unfix()

.. code:: ipython3

    # Create a Pyomo solver object
    solver = pyo.SolverFactory('ipopt')

.. code:: ipython3

    import pandas as pd
    # Add bin information to reconciliation results so it can be used in parameter estimation
    df_result = pd.DataFrame(columns=list(recon_tags.keys())+["termination", "bin_no", "bin_power"], index=df.index)
    df_result_cmp = pd.DataFrame(columns=list(data_tags.keys())+["termination"], index=df.index)
    
    # Loop through each data point and solve the data reconciliation problem. 
    for i in df.index:
        set_data(m, df, data_tags, index=i)
        res = solver.solve(m)
        tc = str(res.solver.termination_condition)
        df_result.iloc[i]["termination"] = tc
        df_result.iloc[i]["bin_no"] = df.iloc[i]["bin_no"]
        df_result.iloc[i]["bin_power"] = df.iloc[i]["bin_power"]
        df_result_cmp.iloc[i]["termination"] = tc
        for t in recon_tags:
            df_result.iloc[i][t] = pyo.value(recon_tags[t])
        for t in data_tags:
            df_result_cmp.iloc[i][t] = pyo.value(data_tags[t])
        # Show something so you can tell progress is happening
        print(f"{i} -- {tc}, objective: {pyo.value(m.objective)}")


.. parsed-literal::

    0 -- optimal, objective: 3.1622227267478564
    1 -- optimal, objective: 0.819788154080471
    2 -- optimal, objective: 1.4704961756858985
    3 -- optimal, objective: 1.1898683973940773
    4 -- optimal, objective: 6.266875727768023
    5 -- optimal, objective: 2.353825037717308
    6 -- optimal, objective: 0.5232293871180635
    7 -- optimal, objective: 1.0234536307430038
    8 -- optimal, objective: 1.692386833712351
    9 -- optimal, objective: 5.200179122889539
    10 -- optimal, objective: 2.0256916107502416
    11 -- optimal, objective: 1.3755108208586206
    12 -- optimal, objective: 1.8040192166109246
    13 -- optimal, objective: 1.0820617353511788
    14 -- optimal, objective: 2.872560865484769
    15 -- optimal, objective: 4.6793955509492084
    16 -- optimal, objective: 2.5285609881578512
    17 -- optimal, objective: 3.41908951940259
    18 -- optimal, objective: 0.673341855201651
    19 -- optimal, objective: 1.319136160157616
    20 -- optimal, objective: 2.591094538468402
    21 -- optimal, objective: 0.728491791618803
    22 -- optimal, objective: 3.096119847074708
    23 -- optimal, objective: 8.0469106121577
    24 -- optimal, objective: 9.43446787232459
    25 -- optimal, objective: 2.9086993281996993
    26 -- optimal, objective: 5.764857210566878
    27 -- optimal, objective: 1.586991533853598
    28 -- optimal, objective: 0.9849808635599029
    29 -- optimal, objective: 5.42071558243433
    30 -- optimal, objective: 0.1598732104118962
    31 -- optimal, objective: 1.9662708564309974
    32 -- optimal, objective: 4.631964135793727
    33 -- optimal, objective: 0.7898364826193096
    34 -- optimal, objective: 4.935317631382528
    35 -- optimal, objective: 2.7822547215128424
    36 -- optimal, objective: 3.7935585045919784
    37 -- optimal, objective: 7.399727809415626
    38 -- optimal, objective: 1.8234865166601448
    39 -- optimal, objective: 8.123224199178901
    40 -- optimal, objective: 2.4669745912046164
    41 -- optimal, objective: 2.059014746274414
    42 -- optimal, objective: 4.824860326020616
    43 -- optimal, objective: 2.9053571960692555
    44 -- optimal, objective: 1.2573333384736212
    45 -- optimal, objective: 2.7626548687169383
    46 -- optimal, objective: 3.9105621874506005
    47 -- optimal, objective: 0.36385114388095996
    48 -- optimal, objective: 6.4820707513142235
    49 -- optimal, objective: 0.8862863572807848
    50 -- optimal, objective: 0.3533327138630075
    51 -- optimal, objective: 0.6741788395561942
    52 -- optimal, objective: 1.446565966022408
    53 -- optimal, objective: 2.3657124776786023
    54 -- optimal, objective: 1.4293043476044978
    55 -- optimal, objective: 11.608878616088006
    56 -- optimal, objective: 2.5845585218155596
    57 -- optimal, objective: 2.228038588968426
    58 -- optimal, objective: 2.495375700856507
    59 -- optimal, objective: 1.6473059536498251
    60 -- optimal, objective: 8.024782999051054
    61 -- optimal, objective: 5.943571679649532
    62 -- optimal, objective: 2.335802980807495
    63 -- optimal, objective: 4.385136256674186
    64 -- optimal, objective: 0.5607930691618441
    65 -- optimal, objective: 2.1768732856568094
    66 -- optimal, objective: 2.823315149731836
    67 -- optimal, objective: 4.396913088762343
    68 -- optimal, objective: 3.3918328175086576
    69 -- optimal, objective: 0.6148676050767488
    70 -- optimal, objective: 0.3708290390409561
    71 -- optimal, objective: 0.8762486395430988
    72 -- optimal, objective: 3.0086242664116245
    73 -- optimal, objective: 6.178298889668415
    74 -- optimal, objective: 2.4515810478691487
    75 -- optimal, objective: 8.974784736396748
    76 -- optimal, objective: 1.7706895755219731
    77 -- optimal, objective: 3.1265400749415577
    78 -- optimal, objective: 5.203571840723386
    79 -- optimal, objective: 4.7696215825016415
    80 -- optimal, objective: 4.81664217257077
    81 -- optimal, objective: 0.6532741094174024
    82 -- optimal, objective: 2.496528721911942
    83 -- optimal, objective: 0.8032383968120522
    84 -- optimal, objective: 0.3628374751581146
    85 -- optimal, objective: 1.523842549686436
    86 -- optimal, objective: 3.8657617083925047
    87 -- optimal, objective: 1.722267511980323
    88 -- optimal, objective: 3.9538723729634793
    89 -- optimal, objective: 1.652362634349699
    90 -- optimal, objective: 3.35110006486022
    91 -- optimal, objective: 1.2094028270637702
    92 -- optimal, objective: 1.5787041255816383
    93 -- optimal, objective: 3.4104171739554925
    94 -- optimal, objective: 1.2638821516690921
    95 -- optimal, objective: 3.295021190107227
    96 -- optimal, objective: 1.5307192842205948
    97 -- optimal, objective: 2.0576184713663745
    98 -- optimal, objective: 1.733204658709841
    99 -- optimal, objective: 4.588279410366772
    100 -- optimal, objective: 0.9293015277967095
    101 -- optimal, objective: 1.1035467025831964
    102 -- optimal, objective: 0.00540309272518927
    103 -- optimal, objective: 4.030370198029044
    104 -- optimal, objective: 2.5977866074241582
    105 -- optimal, objective: 3.718637539092401
    106 -- optimal, objective: 2.2200082219901125
    107 -- optimal, objective: 1.7361606413581874
    108 -- optimal, objective: 1.7827907915253856
    109 -- optimal, objective: 0.8012179144634999
    110 -- optimal, objective: 0.4890822013582347
    111 -- optimal, objective: 4.6254446429039495
    112 -- optimal, objective: 4.073061803308491
    113 -- optimal, objective: 4.984149658953226
    114 -- optimal, objective: 4.500903765842223
    115 -- optimal, objective: 0.8012381845209047
    116 -- optimal, objective: 2.6875543787763636
    117 -- optimal, objective: 6.864920838087331
    118 -- optimal, objective: 3.0375522321897654
    119 -- optimal, objective: 2.494098009707334
    120 -- optimal, objective: 0.46083201829371695
    121 -- optimal, objective: 0.04447225222364782
    122 -- optimal, objective: 1.9092110321559657
    123 -- optimal, objective: 4.153938460441824
    124 -- optimal, objective: 5.6358042613238135
    125 -- optimal, objective: 4.722399489601668
    126 -- optimal, objective: 4.837813299841467
    127 -- optimal, objective: 2.8953995802785655
    128 -- optimal, objective: 0.170072898750277
    129 -- optimal, objective: 0.9837915670309455
    130 -- optimal, objective: 8.052254099295842
    131 -- optimal, objective: 6.260316294304744
    132 -- optimal, objective: 2.5725983302687485
    133 -- optimal, objective: 3.7332013380680378
    134 -- optimal, objective: 0.3400624609820751
    135 -- optimal, objective: 3.6033161609586752
    136 -- optimal, objective: 2.501573096808954
    137 -- optimal, objective: 0.3964042402966752
    138 -- optimal, objective: 0.1414035092242959
    139 -- optimal, objective: 8.317311777960438
    140 -- optimal, objective: 5.424431267918882
    141 -- optimal, objective: 2.835742168672097
    142 -- optimal, objective: 1.5376013961505945
    143 -- optimal, objective: 3.6241963577005945
    144 -- optimal, objective: 4.954703626294936
    145 -- optimal, objective: 0.5851595630069681
    146 -- optimal, objective: 4.899572525361169
    147 -- optimal, objective: 3.6822688057449455
    148 -- optimal, objective: 2.1210898431019762
    149 -- optimal, objective: 1.7199795815276768
    150 -- optimal, objective: 3.318912504228543
    151 -- optimal, objective: 0.36850785731330393
    152 -- optimal, objective: 1.9488329531204163
    153 -- optimal, objective: 2.6747680809659284
    154 -- optimal, objective: 7.585698103492195
    155 -- optimal, objective: 3.395738594834345
    156 -- optimal, objective: 4.149632062900597
    157 -- optimal, objective: 1.000138751954107
    158 -- optimal, objective: 3.0644832117344887
    159 -- optimal, objective: 5.01402155667691
    160 -- optimal, objective: 3.8398189061239636
    161 -- optimal, objective: 1.6576893499093366
    162 -- optimal, objective: 0.4117697397917366
    163 -- optimal, objective: 2.040678862856774
    164 -- optimal, objective: 2.0029963443118457
    165 -- optimal, objective: 2.5115043865191606
    166 -- optimal, objective: 0.4825771048999662
    167 -- optimal, objective: 3.8889325125123992
    168 -- optimal, objective: 1.0769714540447919
    169 -- optimal, objective: 2.4991940991342845
    170 -- optimal, objective: 1.8452022889719537
    171 -- optimal, objective: 4.516275744333781
    172 -- optimal, objective: 3.7259845773036626
    173 -- optimal, objective: 1.9205831842367826
    174 -- optimal, objective: 1.6040433482387764
    175 -- optimal, objective: 0.32970599211641666
    176 -- optimal, objective: 3.177329255930157
    177 -- optimal, objective: 4.892212873755828
    178 -- optimal, objective: 1.7344211222126118
    179 -- optimal, objective: 2.0930113767062757
    180 -- optimal, objective: 1.9821944087034538
    181 -- optimal, objective: 3.095063944360034
    182 -- optimal, objective: 2.5625165342163543
    183 -- optimal, objective: 6.469891429283173
    184 -- optimal, objective: 2.067460638680355
    185 -- optimal, objective: 2.3845354622360744
    186 -- optimal, objective: 1.511992388747906
    187 -- optimal, objective: 3.6254181568251527
    188 -- optimal, objective: 0.9836625190090982
    189 -- optimal, objective: 1.9174184223605704
    190 -- optimal, objective: 1.0199853616407935
    191 -- optimal, objective: 1.8111192038560062
    192 -- optimal, objective: 10.407061899274108
    193 -- optimal, objective: 5.725243783933039
    194 -- optimal, objective: 6.585188554630846
    195 -- optimal, objective: 1.140403477486872
    196 -- optimal, objective: 4.636485739510324
    197 -- optimal, objective: 3.9218037986582885
    198 -- optimal, objective: 1.0045607379024382
    199 -- optimal, objective: 2.418194887917452
    200 -- optimal, objective: 2.9243814391710297
    201 -- optimal, objective: 2.968995475733515
    202 -- optimal, objective: 2.615289296528612
    203 -- optimal, objective: 2.491418211244465
    204 -- optimal, objective: 1.7943475851127992
    205 -- optimal, objective: 5.708324626597115
    206 -- optimal, objective: 2.405605529769493
    207 -- optimal, objective: 0.9383160093488808
    208 -- optimal, objective: 4.7966860750109035
    209 -- optimal, objective: 0.5067752382993027
    210 -- optimal, objective: 2.1890706011637615
    211 -- optimal, objective: 3.216272120700117
    212 -- optimal, objective: 0.07970309825954182
    213 -- optimal, objective: 0.3907198030570752
    214 -- optimal, objective: 4.023971715053776
    215 -- optimal, objective: 3.594247720308124
    216 -- optimal, objective: 1.677775501121071
    217 -- optimal, objective: 4.848035154404837
    218 -- optimal, objective: 0.488546384427088
    219 -- optimal, objective: 12.374531482863292
    220 -- optimal, objective: 1.428390679628371
    221 -- optimal, objective: 1.818047437248662
    222 -- optimal, objective: 0.4850181471500038
    223 -- optimal, objective: 2.5067704521200347
    224 -- optimal, objective: 1.3976831205728761
    225 -- optimal, objective: 0.9031827797634441
    226 -- optimal, objective: 0.7285597986984597
    227 -- optimal, objective: 2.4704207267074114
    228 -- optimal, objective: 2.675098906685957
    229 -- optimal, objective: 3.3257056456054337
    230 -- optimal, objective: 2.5990527127800798
    231 -- optimal, objective: 4.837619200685966
    232 -- optimal, objective: 1.1329374346635608
    233 -- optimal, objective: 1.6398640882823556
    234 -- optimal, objective: 3.008950871925224
    235 -- optimal, objective: 1.4124059496646517
    236 -- optimal, objective: 5.77196540759922
    237 -- optimal, objective: 0.14938189272241015
    238 -- optimal, objective: 1.2057413172016598
    239 -- optimal, objective: 1.7168330910787541
    240 -- optimal, objective: 4.602205543920156
    241 -- optimal, objective: 2.123631117523193
    242 -- optimal, objective: 2.5316135514749796
    243 -- optimal, objective: 1.7031605794316949
    244 -- optimal, objective: 2.217789233310225
    245 -- optimal, objective: 0.6465633467363304
    246 -- optimal, objective: 1.2916378800472945
    247 -- optimal, objective: 7.789851988626186
    248 -- optimal, objective: 1.0605735856125638
    249 -- optimal, objective: 1.1514691265139687


.. code:: ipython3

    # Save the reconciled data to be used for parameter estimation
    df_result.to_csv("econ_recon.csv")

.. code:: ipython3

    try:
        # Create a new plot book to compare the original data to the reconciled data.
        da.data_rec_plot_book(
            df_data=df, 
            df_rec=df_result_cmp,
            file="econ_data_rec_plot_book.pdf",
            bin_nom="bin_power", 
            xlabel="gross power (W)", 
            metadata=df_meta
        )
    except:
        print("Plotting failed")


.. parsed-literal::

    Plotting data requires the 'seaborn' and 'PyPDF2' packages. Install the required packages before using the data_book() function. Plot terminated.


